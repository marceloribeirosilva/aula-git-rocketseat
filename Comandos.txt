# PARA COMEÇAR A UTILIZAR O GIT NO PROJETO
> git init

# ADICIONANDO O ARQUIVO NO CONTROLE DE VERSÃO
> git add nomeArquivo

# CRIANDO UMA VERSÃO DO ARQUIVO (ANALOGIA: PONTO NA HISTÓRIA DO ARQUIVO "LINHA DO TEMPO")
> git commit -m "Mensagem"
. git commit -am "Mensagem" (comando curto para adicionar e comitar)

# VENDO ESSE PONTO MARCADO NA LINHA DO TEMPO
> git log

# VENDO O STATUS DO GIT
> git status

# VER AS MUDANÇAS DO ARQUIVO
> git show "ID do Commit" (O id pega com o git log)
> Caso eu queira ver a última alteração git, basta eu digitar git show sem o id

# CRIANDO UMA NOVA RAMIFICAÇÃO (Como se criasse uma nova linha do tempo)
Obs.: Isso é muito usado quando queremos criar uma funcionalidade nova, ou algo assim, sem perder o que já foi feito.
> git branch "nome da ramificação

# MUDANDO PARA UMA RAMIFICAÇÃO ESPECÍFICA
> git checkout NomeBranch

# VER TODAS AS BRANCHS
> git branch

# CRIANDO UMA BRANCH E JÁ FAZENDO O CHECKOUT
> git checkout -b nomeBranch

# VER OS ARQUIVOS DA RAMIFICAÇÃO
> git ls -al

# PARA MESCLAR UMA BRANCH A PRINCIPAL
> git merge NomeBranch

# DELETANDO A BRANCH APÓS NÃO PRECISAR MAIS
Obs.: Isso é feito após ter feito um merge da nova funcionalidade para a branch principal e depois não será
preciso utilizar essa ramificação.
> git branch -D NomeBranch

# ADICIONANDO UM REPOSITÓRIO NA NUVEM (GITHUB)
> git remote add origin "endereço do repositório"

# VER OS REPOSITÓRIOS REMOTOS
> git remote -v

# DANDO PUSH (EMPURRANDO) O REPOSITORIO LOCAL PARA O REMOTO
> git push -u origin master

# PARA ARMAZENAR O USUÁRIO E SENHA DO GITHUB
> git config credential.helper store

# CLONANDO UM PROJETO DO GITHUB
> git clone endereço do projeto

# ATUALIZANDO O REPOSITORIO LOCAL DE ACORDO COM O REPOSITORIO REMOTO
> git pull




